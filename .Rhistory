et <- '2010/01/01'
#Make a randomly generated date of birth variable for each simulated individual,
#that assumes all individuals were born between within the start and end of time
#set previously
set.seed(777)
date_of_birth <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
#Add these variables to make a dataframe
dat <- data.frame(ID, date_of_birth)
get_dates <- function(X, min_diff=0) {
#date_recorded should be after the date_of_birth but before the
#et. mid_diff allows a minimum difference between the date of birth
#and the recorded date, with the default set to 0
set.seed(778)
X$date_recorded <- (sample(seq(as.Date(X$date_of_birth),
as.Date(et), by="day"), 1)) + min_diff
#start_date should be after the date_of birth but before the date
#recorded
set.seed(779)
X$start_date <- (sample(seq(as.Date(X$date_of_birth),
as.Date(X$date_recorded), by="day"), 1))
#end_date should be after the start_date but before the et
set.seed(780)
X$end_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$date_recorded), by="day"), 1))
#visit date should be between the start and end dates
set.seed(781)
X$visit_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$end_date), by="day"), 1))
return(X)
}
#This applies the function to each row, with a minimum difference between
#the date of birth and date recorded set at 28 days
dat <- ddply(dat, 1, get_dates, min_diff = 28)
p <- 0.05
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq(as.Date(st),
(as.Date(X$date_of_birth)-1), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates, min_diff = 28)
dat <- ddply(dat, 1, get_error_dates)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq(as.Date(st),
as.Date(X$date_of_birth), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
View(dat)
View(dat)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq(as.Date(st),
as.Date(X$date_of_birth-1), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
dat$date_of_birth-1
x <- dat$date_of_birth-1
class(x)
class(dat$date_of_birth)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq(as.Date(st),
as.Date(X$date_of_birth), by="day"), 1))
#start_date after the date recorded
set.seed(783)
X$SD_DOB <- (sample(seq(as.Date(X$date_recorded),
as.Date(et), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
dat2 <- dat %>%
dplyr::group_by(ID) %>%
dplyr::do(get_error_dates(.)) %>%
dplyr::ungroup()
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq(as.Date(st),
as.Date(X$date_of_birth), by="day"), 1))
#start_date after the date recorded
set.seed(783)
X$SD_UP <- (sample(seq(as.Date(X$date_recorded),
as.Date(et), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq(as.POSIXct(st),
as.POSIXct(X$date_of_birth), by="day"), 1))
#start_date after the date recorded
set.seed(783)
X$SD_UP <- (sample(seq(as.POSIXct(X$date_recorded),
as.POSIXct(et), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq.Date(st,X$date_of_birth, by="day"), 1))
#start_date after the date recorded
set.seed(783)
X$SD_UP <- (sample(seq.Date(X$date_recorded,et, by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq.Date(as.Date(st),X$date_of_birth, by="day"), 1))
#start_date after the date recorded
set.seed(783)
X$SD_UP <- (sample(seq.Date(X$date_recorded,et, by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq.Date(as.Date(st),as.Date(X$date_of_birth), by="day"), 1))
#start_date after the date recorded
set.seed(783)
X$SD_UP <- (sample(seq.Date(X$date_recorded,et, by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq.Date(as.Date(st),as.Date(X$date_of_birth), by="day"), 1))
#start_date after the date recorded
set.seed(783)
X$SD_UP <- (sample(seq.Date(as.Date(X$date_recorded),as.Date(et), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
get_dates <- function(X, min_diff1=0, min_diff2=1, min_diff1 = 1, ) {
#date_recorded should be after the date_of_birth but before the
#et. mid_diff allows a minimum difference between the date of birth
#and the recorded date, with the default set to 0
set.seed(778)
X$date_recorded <- (sample(seq(as.Date(X$date_of_birth),
as.Date(et), by="day"), 1)) + min_diff1
#start_date should be after the date_of birth but before the date
#recorded
set.seed(779)
X$start_date <- (sample(seq(as.Date(X$date_of_birth),
as.Date(X$date_recorded), by="day"), 1)) + min_diff2
#end_date should be after the start_date but before the et
set.seed(780)
X$end_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$date_recorded), by="day"), 1)) + min_diff3
#visit date should be between the start and end dates
set.seed(781)
X$visit_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$end_date), by="day"), 1))
return(X)
}
#This applies the function to each row, with a minimum difference between
#the date of birth and date recorded set at 28 days
dat <- ddply(dat, 1, get_dates, min_diff = 28)
get_dates <- function(X, min_diff1=0, min_diff2=1, min_diff1 = 1, ) {
#date_recorded should be after the date_of_birth but before the
#et. mid_diff allows a minimum difference between the date of birth
#and the recorded date, with the default set to 0
set.seed(778)
X$date_recorded <- (sample(seq(as.Date(X$date_of_birth),
as.Date(et), by="day"), 1)) + min_diff1
#start_date should be after the date_of birth but before the date
#recorded
set.seed(779)
X$start_date <- (sample(seq(as.Date(X$date_of_birth),
as.Date(X$date_recorded), by="day"), 1)) + min_diff2
#end_date should be after the start_date but before the et
set.seed(780)
X$end_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$date_recorded), by="day"), 1)) + min_diff3
#visit date should be between the start and end dates
set.seed(781)
X$visit_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$end_date), by="day"), 1))
return(X)
}
get_dates <- function(X, min_diff1=0, min_diff2=1, min_diff3=1) {
#date_recorded should be after the date_of_birth but before the
#et. mid_diff allows a minimum difference between the date of birth
#and the recorded date, with the default set to 0
set.seed(778)
X$date_recorded <- (sample(seq(as.Date(X$date_of_birth),
as.Date(et), by="day"), 1)) + min_diff1
#start_date should be after the date_of birth but before the date
#recorded
set.seed(779)
X$start_date <- (sample(seq(as.Date(X$date_of_birth),
as.Date(X$date_recorded), by="day"), 1)) + min_diff2
#end_date should be after the start_date but before the et
set.seed(780)
X$end_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$date_recorded), by="day"), 1)) + min_diff3
#visit date should be between the start and end dates
set.seed(781)
X$visit_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$end_date), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_dates, min_diff = 28)
dat <- ddply(dat, 1, get_dates, min_diff1 = 28)
get_dates <- function(X, min_diff1=0, min_diff2=1, min_diff3=1),min_diff4=1) {
#date_recorded should be after the date_of_birth but before the
#et. mid_diff allows a minimum difference between the date of birth
#and the recorded date, with the default set to 0
set.seed(778)
X$date_recorded <- (sample(seq(as.Date(X$date_of_birth),
as.Date(et), by="day"), 1)) + min_diff1
#start_date should be after the date_of birth but before the date
#recorded
set.seed(779)
X$start_date <- (sample(seq(as.Date(X$date_of_birth + min_diff2),
as.Date(X$date_recorded), by="day"), 1))
#end_date should be after the start_date but before the et
set.seed(780)
X$end_date <- (sample(seq(as.Date(X$start_date + min_diff3),
as.Date(X$date_recorded), by="day"), 1))
#visit date should be between the start and end dates
set.seed(781)
X$visit_date <- (sample(seq(as.Date(X$start_date + min_diff4),
as.Date(X$end_date), by="day"), 1))
return(X)
}
get_dates <- function(X, min_diff1=0, min_diff2=1, min_diff3=1,min_diff4=1) {
#date_recorded should be after the date_of_birth but before the
#et. mid_diff allows a minimum difference between the date of birth
#and the recorded date, with the default set to 0
set.seed(778)
X$date_recorded <- (sample(seq(as.Date(X$date_of_birth),
as.Date(et), by="day"), 1)) + min_diff1
#start_date should be after the date_of birth but before the date
#recorded
set.seed(779)
X$start_date <- (sample(seq(as.Date(X$date_of_birth + min_diff2),
as.Date(X$date_recorded), by="day"), 1))
#end_date should be after the start_date but before the et
set.seed(780)
X$end_date <- (sample(seq(as.Date(X$start_date + min_diff3),
as.Date(X$date_recorded), by="day"), 1))
#visit date should be between the start and end dates
set.seed(781)
X$visit_date <- (sample(seq(as.Date(X$start_date + min_diff4),
as.Date(X$end_date), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_dates, min_diff1 = 28)
View(dat)
get_error_dates <- function(X) {
#start_date before the date_of birth
set.seed(782)
X$SD_DOB <- (sample(seq(as.Date(st),
as.Date(X$date_of_birth), by="day"), 1))
#start_date after the date recorded
set.seed(783)
X$SD_UP <- (sample(seq(as.Date(X$date_recorded),
as.Date(et), by="day"), 1))
return(X)
}
dat <- ddply(dat, 1, get_error_dates)
dat <- data.frame(ID, date_of_birth)
#Function that generates random dates for when the incidents were recorded
get_dates <- function(X, min_diff=0) {
#date_recorded should be after the date_of_birth but before the
#et. mid_diff allows a minimum difference between the date of birth
#and the recorded date, with the default set to 0
set.seed(778)
X$date_recorded <- (sample(seq(as.Date(X$date_of_birth),
as.Date(et), by="day"), 1)) + min_diff
#start_date should be after the date_of birth but before the date
#recorded
set.seed(779)
X$start_date <- (sample(seq(as.Date(X$date_of_birth),
as.Date(X$date_recorded), by="day"), 1))
#end_date should be after the start_date but before the et
set.seed(780)
X$end_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$date_recorded), by="day"), 1))
#visit date should be between the start and end dates
set.seed(781)
X$visit_date <- (sample(seq(as.Date(X$start_date),
as.Date(X$end_date), by="day"), 1))
return(X)
}
#This applies the function to each row, with a minimum difference between
#the date of birth and date recorded set at 28 days
dat <- ddply(dat, 1, get_dates, min_diff = 28)
sub1 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
View(sub1)
dat$SD_error <- c(dat[sample(nrow(dat), (max(dat$ID)*p)), ], NA)
sub1$SD_error_gen <- TRUE
dat <- join(dat,sub1)
View(dat)
dat[is.na(dat$SD_error_gen)] = FALSE
dat[is.na(dat$SD_error_gen)] <- FALSE
is.na(dat$SD_error_gen) <- FALSE
View(dat)
dat[, is.na(dat$SD_error_gen)]
dat[is.na(dat$SD_error_gen),]
dat[is.na(dat$SD_error_gen),] <- FALSE
dat$SD_error_gen <- ifelse(is.na(dat$SD_error_gen), FALSE, dat$SD_error_gen)
View(dat)
dat <- join(dat,sub1)
dat$random_SDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
sub1 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub1$SD_error_gen <- TRUE
dat <- join(dat,sub1)
dat$random_SDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$start_date2 <- ifelse(dat$SD_error_gen == TRUE, dat$random_SDs, dat$start_date)
View(dat)
dat$start_date2 <- as.Date(ifelse(dat$SD_error_gen == TRUE, dat$random_SDs, dat$start_date))
dat$start_date2 <- as.Date(dat$start_date2)
?ifelse
dat$start_date2 <- ifelse(dat$SD_error_gen == TRUE, as.Date(dat$random_SDs), dat$start_date)
View(dat)
dat$start_date2 <- as.Date(dat$start_date2, origin="1970-01-01")
View(dat)
p <- 0.1 #percentage of data that may contain errors
#start dates
sub1 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub1$SD_error_gen <- TRUE
dat <- join(dat,sub1)
dat$random_SDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$start_date <- ifelse(dat$SD_error_gen == TRUE, dat$random_SDs, dat$start_date)
dat$start_date <- as.Date(dat$start_date, origin="1970-01-01")
#end dates
sub2 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub2$ED_error_gen <- TRUE
dat <- join(dat,sub2)
dat$random_EDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$end_date <- ifelse(dat$ED_error_gen == TRUE, dat$random_EDs, dat$end_date)
dat$end_date <- as.Date(dat$end_date, origin="1970-01-01")
#visited vet dates
sub3 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub3$VD_error_gen <- TRUE
dat <- join(dat,sub3)
dat$random_VDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$visit_date <- ifelse(dat$VD_error_gen == TRUE, dat$random_VDs, dat$visit_date)
dat$visit_date <- as.Date(dat$visit_date, origin="1970-01-01")
View(dat)
dat <- data.frame(ID, date_of_birth)
dat <- ddply(dat, 1, get_dates, min_diff = 28)
p <- 0.1 #percentage of data that may contain errors
#start dates
sub1 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub1$SD_error_gen <- TRUE
dat <- join(dat,sub1)
dat$random_SDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$start_date <- ifelse(dat$SD_error_gen == TRUE, dat$random_SDs, dat$start_date)
dat$start_date <- as.Date(dat$start_date, origin="1970-01-01")
View(dat)
dat$start_date <- ifelse(dat$SD_error_gen == TRUE, dat$random_SDs, dat$start_date)
View(dat)
dat <- data.frame(ID, date_of_birth)
dat <- ddply(dat, 1, get_dates, min_diff = 28)
sub1 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub1$SD_error_gen <- TRUE
View(sub1)
dat <- join(dat,sub1)
View(dat)
dat$random_SDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
View(dat)
dat$start_date2 <- ifelse(dat$SD_error_gen == TRUE, dat$random_SDs, dat$start_date)
View(dat)
is.na(dat$SD_error_gen) <- FALSE
View(dat)
View(dat)
dat$SD_error_gen <- ifelse(is.na(dat$SD_error_gen), FALSE, dat$SD_error_gen)
View(dat)
dat <- join(dat,sub1)
dat <- data.frame(ID, date_of_birth)
dat <- ddply(dat, 1, get_dates, min_diff = 28)
sub1 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub1$SD_error_gen <- TRUE
dat <- join(dat,sub1)
dat$random_SDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$start_date2 <- ifelse(dat$SD_error_gen == TRUE & !is.na(dat$SD_error_gen),
dat$random_SDs, dat$start_date)
View(dat)
dat$start_date <- ifelse(dat$SD_error_gen == TRUE & !is.na(dat$SD_error_gen),
dat$random_SDs, dat$start_date)
dat$start_date <- as.Date(dat$start_date, origin="1970-01-01")
View(dat)
dat <- data.frame(ID, date_of_birth)
dat <- ddply(dat, 1, get_dates, min_diff = 28)
#start dates
sub1 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub1$SD_error_gen <- TRUE
dat <- join(dat,sub1)
dat$random_SDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$start_date <- ifelse(dat$SD_error_gen == TRUE & !is.na(dat$SD_error_gen),
dat$random_SDs, dat$start_date)
dat$start_date <- as.Date(dat$start_date, origin="1970-01-01")
#end dates
sub2 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub2$ED_error_gen <- TRUE
dat <- join(dat,sub2)
dat$random_EDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$end_date <- ifelse(dat$ED_error_gen == TRUE & !is.na(dat$ED_error_gen)
, dat$random_EDs, dat$end_date)
dat$end_date <- as.Date(dat$end_date, origin="1970-01-01")
#visited vet dates
sub3 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub3$VD_error_gen <- TRUE
dat <- join(dat,sub3)
dat$random_VDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$visit_date <- ifelse(dat$VD_error_gen == TRUE & !is.na(dat$VD_error_gen),
dat$random_VDs, dat$visit_date)
dat$visit_date <- as.Date(dat$visit_date, origin="1970-01-01")
View(dat)
#start dates
set.seed(782)
sub1 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub1$SD_error_gen <- TRUE
dat <- join(dat,sub1)
set.seed(783)
dat$random_SDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$start_date <- ifelse(dat$SD_error_gen == TRUE & !is.na(dat$SD_error_gen),
dat$random_SDs, dat$start_date)
dat$start_date <- as.Date(dat$start_date, origin="1970-01-01")
#end dates
set.seed(784)
sub2 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub2$ED_error_gen <- TRUE
dat <- join(dat,sub2)
set.seed(785)
dat$random_EDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$end_date <- ifelse(dat$ED_error_gen == TRUE & !is.na(dat$ED_error_gen)
, dat$random_EDs, dat$end_date)
dat$end_date <- as.Date(dat$end_date, origin="1970-01-01")
#visited vet dates
set.seed(786)
sub3 <- dat[sample(nrow(dat), (max(dat$ID)*p)), ]
sub3$VD_error_gen <- TRUE
dat <- join(dat,sub3)
set.seed(787)
dat$random_VDs <- sample(seq(as.Date(st), as.Date(et),
by="day"), 10000, replace = TRUE)
dat$visit_date <- ifelse(dat$VD_error_gen == TRUE & !is.na(dat$VD_error_gen),
dat$random_VDs, dat$visit_date)
dat$visit_date <- as.Date(dat$visit_date, origin="1970-01-01")
View(dat)
q <- 0.05 #percentage of data that contains missing data
#start dates
set.seed(788)
sub4 <- dat[sample(nrow(dat), (max(dat$ID)*q)), ]
sub4$SD_error_gen <- TRUE
dat <- join(dat,sub4)
set.seed(789)
dat$start_date <- ifelse(dat$SD_error_gen == TRUE & !is.na(dat$SD_error_gen),
NA, dat$start_date)
View(dat)
dat$start_date <- as.Date(dat$start_date, origin="1970-01-01")
#start dates
set.seed(788)
sub4 <- dat[sample(nrow(dat), (max(dat$ID)*q)), ]
sub4$SD_error_gen2 <- TRUE
dat <- join(dat,sub4)
set.seed(789)
dat$start_date <- ifelse(dat$SD_error_gen2 == TRUE & !is.na(dat$SD_error_gen2),
NA, dat$start_date)
dat$start_date <- as.Date(dat$start_date, origin="1970-01-01")
#end dates
set.seed(790)
sub5 <- dat[sample(nrow(dat), (max(dat$ID)*q)), ]
sub5$ED_error_gen2 <- TRUE
dat <- join(dat,sub5)
set.seed(791)
dat$end_date <- ifelse(dat$ED_error_gen2 == TRUE & !is.na(dat$ED_error_gen2),
NA, dat$end_date)
dat$end_date <- as.Date(dat$end_date, origin="1970-01-01")
#visited vet dates
set.seed(792)
sub6 <- dat[sample(nrow(dat), (max(dat$ID)*q)), ]
sub6$VD_error_gen2 <- TRUE
dat <- join(dat,sub6)
set.seed(793)
dat$visit_date <- ifelse(dat$VD_error_gen2 == TRUE & !is.na(dat$VD_error_gen2),
NA, dat$visit_date)
dat$visit_date <- as.Date(dat$visit_date, origin="1970-01-01")
View(dat)
View(dat)
dat <- dat[, 1:6]
write.csv(dat, 'example_dates_data.csv')
