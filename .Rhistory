library(nlme)
library(tidyverse)
#EXTRACTING DATA FROM DATABASE
#This database was frozen in July 2017 for Charlotte. Pet IDs that are excluded are
#'fake' dogs which were used by admin to set up
#the website
##SQL query to extract data from database
m <- dbDriver("MySQL")
con <- dbConnect(m, dbname = "dogslife_july17",
user="dl_july17",
password="T5SP58Mkdzh",
host="ris-vlxdb01.roslin.ed.ac.uk",
port=3306)
queryAll <- "
SELECT
pets.id pet_ID,pets.dob DB_DOB, pets.name, pets.sex, pet_heights.id h_id,
pet_heights.date_recorded, data_entries.id de_id, pet_heights.height
FROM pets
LEFT OUTER JOIN data_entries
ON pets.id = data_entries.pet_id
LEFT OUTER JOIN pet_heights
ON data_entries.id = pet_heights.data_entry_id
WHERE pets.id!='2'
AND pets.id != '4'
AND pets.id != '6'
AND pets.id != '9'
AND pets.id != '146'
AND pets.id != '33'
AND pets.id != '485'
AND pets.id != '3310'
AND pets.id != '2033'
AND pets.id != '4051'
AND pets.id != '7148'
"
x.h <- dbSendQuery(con, queryAll )
dat_orig <- fetch(x.h, n=-1)
dbDisconnect(con)
# A function to convert unixtime into a human-readable date
unixDate <- function(x) {
as.Date(x/24/60/60, origin="1970-01-01 00:00:01")
}
days_in_a_month <- 365.25 / 12
#General organsiation of data and removal of NAs
dat <- dat_orig %>%
dplyr::mutate(new_height = height,
pet_ID = factor(pet_ID),
DB_DOB = lubridate::dmy(DB_DOB),
new_height_date_recorded =
unixDate(date_recorded),
height_age =
as.numeric(new_height_date_recorded - DB_DOB),
height_age_months =
as.numeric(height_age) / days_in_a_month) %>%
dplyr::select(pet_ID, name, sex, DB_DOB, date_recorded,
new_height_date_recorded, height_age,
height_age_months, height, new_height)
dat <- dat[complete.cases(dat$height), ]
#UNCLEANED DATA
dat$pet_ID <- factor(dat$pet_ID)
print(length(dat$pet_ID)) - print(length(dat_orig$pet_ID))
print(length(unique(dat$pet_ID))) - print(length(unique(dat_orig$pet_ID)))
#dat_orig has 50826 data entries from 7312 dogs
#dat has 28051 data entries from 5531 dogs
#Removal of NAs led to a total of 22775 data entry removals and 1781 dogs removals
#STEP 1 OF CLEANING - Apply 5 day window
#Function to remove data entries within 5 days of eachother
correct_age <- function(X, epsilon){
X <- X[order(X$height_age), ]
X <- X[!c(diff(X$height_age) < epsilon, FALSE), ]
return(X)
}
dat2 <- ddply(dat, "pet_ID", correct_age, 5) %>%
dplyr::filter(!is.na(pet_ID))
data_entries <- data.frame(table(dat2$pet_ID)) %>%
dplyr::rename(pet_ID = Var1, num_data_entries = Freq)
dat2 <- full_join(dat2, data_entries)
#STEP 1 RESULTS -
dat2$pet_ID <- factor(dat2$pet_ID)
print(length(dat2$pet_ID)) - print(length(dat$pet_ID))
print(length(unique(dat2$pet_ID))) - print(length(unique(dat$pet_ID)))
#dat has 28051 data entries from 5531 dogs
#dat2 has 23105 data entries from 5531 dogs
#Total of 4946 data entry removals and 0 dogs removals
#SUBSTEP - BUILD A HEIGHT MODEL BASED ON SUBSET
#Now a subset of 'clean' dogs is generated from the data after step 1 in order
#to build a height model upon data that does not contain obvious errors
#SUBSTEP a) - Clean subset based on excluding conditions
modeldat <- dat2
any_imposs_dogs <- function (X) {
imposs <- any((X$height_age_months < 6)
& ((X$height < 5)
| (X$height > 60))
| (X$height_age_months >= 6
& X$height_age_months < 9)
& ((X$height < 15)
| (X$height > 70))
| (X$height_age_months >= 9
& X$height_age_months < 18)
& ((X$height < 25)
| (X$height > 70))
| (X$height_age_months >= 18)
& ((X$height < 30)
| (X$height > 80)))
return(data.frame(X, imposs = imposs))
}
modeldat <- modeldat %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(any_imposs_dogs(.)) %>%
dplyr::ungroup() %>%
dplyr::filter(!imposs)
modeldat$pet_ID <- factor(modeldat$pet_ID)
print(length(modeldat$pet_ID)) - print(length(dat2$pet_ID))
print(length(unique(modeldat$pet_ID))) - print(length(unique(dat2$pet_ID)))
#dat2 has 23105 data entries from 5531 dogs
#modeldat has 20125 data entries from 4985 dogs
#Total of 2980 data entry removals and 546 dogs removals
#SUBSTEP b) - Remove dogs that do not have more than 4 data entries
modeldat2 <- subset(modeldat, modeldat$num_data_entries > 4)
modeldat2$pet_ID <- factor(modeldat2$pet_ID)
print(length(modeldat2$pet_ID)) - print(length(modeldat$pet_ID))
print(length(unique(modeldat2$pet_ID))) - print(length(unique(modeldat$pet_ID)))
#modeldat has 20125 data entries from 4985 dogs
#modeldat2 has 14135 data entries from 1820 dogs
#Total of 5990 data entry removals and 3165 dogs removals
#SUBSTEP c) - remove dogs that jump in size
#Big shrinks (more than a 6cm decrease between consecutive datapoints)
#Big spurts (more than a 40cm increase between consecutive datapoints) in size
any_big_shrinks <- function(X, size){
shrinker <- any(diff(X$height) <= - size)
return(data.frame(X, shrinker = shrinker))
}
modeldat3 <- modeldat2 %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(any_big_shrinks(., 6)) %>%
dplyr::ungroup() %>%
dplyr::filter(!shrinker)
modeldat3$pet_ID <- factor(modeldat3$pet_ID)
print(length(modeldat3$pet_ID)) - print(length(modeldat2$pet_ID))
print(length(unique(modeldat3$pet_ID))) - print(length(unique(modeldat2$pet_ID)))
#modeldat2 has 14135 data entries from 1820 dogs
#modeldat3 has 11621 data entries from 1498 dogs
#Total of 2514 data entry removals and 322 dogs removals
any_big_spurts <- function(X, size){
spurter <- any(diff(X$height) >= size)
return(data.frame(X, spurter = spurter))
}
final_modeldat <- modeldat3 %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(any_big_spurts(., 30)) %>%
dplyr::ungroup() %>%
dplyr::filter(!spurter)
final_modeldat <- final_modeldat %>%
dplyr::mutate(sex = factor(sex),
pet_ID = factor(pet_ID)) %>%
dplyr::select(pet_ID, name, sex, height_age,
height_age_months, height, new_height,
num_data_entries)
final_modeldat$pet_ID <- factor(final_modeldat$pet_ID)
print(length(final_modeldat$pet_ID)) - print(length(modeldat3$pet_ID))
print(length(unique(final_modeldat$pet_ID))) - print(length(unique(modeldat3$pet_ID)))
#modeldat3 has 11621 data entries from 1498 dogs
#final_modeldat has 11503 data entries from 1481 dogs
#Total of 118 data entry removals and 17 dogs removals
#GENERATING THE MODEL
#Run the model on the cleaned subset of dogs
fm1 <- nlme(height ~ SSasympOff(height_age, Asym, growth_rate,
age_at_height_zero),
data = final_modeldat,
fixed = list(Asym + age_at_height_zero +
growth_rate ~ 1 + sex),
random = Asym + growth_rate ~ 1|pet_ID,
start = list(fixed = c(Asym = c(60,1),
age_at_height_zero = -c(10,1),
growth_rate = -c(4,1))))
summary(fm1)
#Calculate prediction intervals
#First of all we need to establish what age groups the data needs
#to be broken into in order to have enough data to calculate
#prediction intervals
len1 <- round_any(max(dat2$height_age), 28, ceiling) #This is the
#max age that the age groups need to include
intervals <- seq(from = 0, to = len1, by = 28)
#This function calculates how many rows there are in a group
get_interval_info <- function(X, var_name){
X <- X[order(X$height_age), ]
observation <- 1:nrow(X)
X$num_in_group <- tail(observation, 1)
return(X)
}
#Apply the function to each age group
final_modeldat <- final_modeldat %>%
mutate(age_groups = as.character(cut(height_age, breaks = intervals))) %>%
group_by(age_groups) %>%
do(get_interval_info(.)) %>%
ungroup()
#This code allows you to easily visualise which groups don't have enough data
invalid_agegroups <- subset(final_modeldat, final_modeldat$num_in_group < 10)
print(invalid_agegroups$age_groups) #interval [0 28] needs changing to [0 56]
#intervals [588 616], [616 644], [644 672] need changing to [560 672]
intervals1 <- unique(c(0, 56, seq(from = 56, to = 560, by = 28),
560, 672, seq(from = 672, to = len1, by = 28)))
#Apply the same principles but to the full data to ensure that all age groups
#are properly covered
dat2 <- dat2 %>%
mutate(age_groups = as.character(cut(height_age, breaks = intervals1))) %>%
group_by(age_groups) %>%
do(get_interval_info(., "num_in_group")) %>%
ungroup()
invalid_agegroups2 <- subset(dat2, dat2$num_in_group < 10)
print(invalid_agegroups2$age_groups) #interval [840 868] needs changing to [560 868]
#the other groups need changing to [1176 len1]
intervals2 <- unique(c(0, 56, seq(from = 56, to = 560, by = 28),
560, 868, seq(from = 868, to = 1176, by = 28), len1))
prob = 0.001 #set the probability
grid <- final_modeldat %>%
data_grid(pet_ID = unique(pet_ID),
height_age = intervals2,
sex = unique(sex)) %>%
add_predictions(fm1, var = "pred1") %>%
group_by(height_age, sex) %>%
dplyr::summarise(lower = quantile(pred1, probs = prob),
upper = quantile(pred1, probs = (1 - prob)),
pred1 = mean(pred1),
n = length(pred1)) %>%
ungroup() %>%
mutate(age_groups = cut(height_age, breaks = intervals2))
grid_resid <- as.tbl(final_modeldat) %>%
add_residuals(fm1, var = "resid1") %>%
mutate(age_groups = cut(height_age, breaks = intervals2)) %>%
group_by(age_groups, sex) %>%
dplyr::summarise(sd = sd(resid1)) %>%
ungroup()
grid_merged <- grid %>%
full_join(grid_resid) %>%
mutate(lower2 = lower + qnorm(prob) * sd,
upper2 = upper + qnorm(1 - prob) * sd)
dat2 <- dat2 %>%
dplyr::mutate(height_age = as.numeric(height_age),
sex = as.factor(sex),
age_groups = cut(height_age, breaks = intervals2))
dat2 <- dat2 %>%
full_join(grid_merged, by = c("age_groups", "sex")) %>%
filter(!is.na(pet_ID))
#Function to categorise whether dog owners entered heights as inches or cm
ins_or_cm <- function(X) {
X = as.integer(X) == X
X <- ifelse(X == FALSE, "cm", "ins")
return(X)
}
dat2$cm_heights <- as.numeric(dat2$height*2.54)
dat2$inches_heights <- round(as.numeric(dat2$height*0.393701), 2)
dat2$height_unit <- ins_or_cm(dat2$inches_heights)
#STEP 2 OF CLEANING - REMOVE IMPOSSIBLY SMALL HEIGHTS
#First of all, data entries which have obviously been entered as an error
#Becuase they are so small are deleted. This is classed as dogs that were
#entered as less than or equal to 3cm or 3 inches
dat3 <- subset(dat2, !(((dat2$height <= 3) &
(dat2$height_unit == 'cm'))
| ((dat2$height < 7.04) &
(dat2$height_unit == 'ins'))))
data_entries2 <- data.frame(table(dat3$pet_ID)) %>%
dplyr::rename(pet_ID = Var1, num_data_entries2 = Freq)
dat3 <- full_join(dat3, data_entries2)
dat3 <- dat3[complete.cases(dat3$height), ]
#STEP 2 RESULTS -
dat3$pet_ID <- factor(dat3$pet_ID)
print(length(dat3$pet_ID)) - print(length(dat2$pet_ID))
print(length(unique(dat3$pet_ID))) - print(length(unique(dat2$pet_ID)))
#dat2 has 23105 data entries from 5531 dogs
#modeldat has 22983 data entries from 5507 dogs
#Total of 122 data entry removals and 24 dogs removals
#STEP 3 OF CLEANING - IDENTIFY AND CORRECT UNIT ERRORS
#cm errors are when owners have accidentally entered values in cm rather
#than inches e.g 25cm rather than 25inches
#inches errors are when owners have accidentally entered values in inches
#rather than cm e.g 50 inches rather than 20 inches
dat4a <- dat3
dat4a$outliers <- (dat4a$height < dat4a$lower2) |
(dat4a$height > dat4a$upper2)
dat4a$poss_cm_error <- (dat4a$outliers == TRUE) &
(dat4a$cm_heights < dat4a$upper2 & dat4a$cm_heights > dat4a$lower2)
dat4a$cm_error <- (dat4a$poss_cm_error == TRUE) &
(dat4a$height_unit == 'cm')
dat4a$new_height <- ifelse(dat4a$cm_error == TRUE,
dat4a$cm_heights, dat4a$new_height)
sum(dat3$new_height != dat4a$new_height, na.rm = TRUE)
#758 adjustments taken place
dat4b <- dat4a
dat4b$poss_inches_error <- (dat4b$outliers == TRUE) &
(dat4b$inches_heights < dat4b$upper2 &
dat4b$inches_heights > dat4b$lower2)
dat4b$inches_error <- (dat4b$poss_inches_error == TRUE) &
(dat4b$height_unit == 'ins')
dat4b$new_height <- ifelse(dat4b$inches_error == TRUE,
dat4b$inches_heights, dat4b$new_height)
sum(dat4b$new_height != dat4a$new_height, na.rm = TRUE)
#42 adjustments taken place
#STEP 3 RESULTS-
dat4b$pet_ID <- factor(dat4b$pet_ID)
print(length(dat4b$pet_ID)) - print(length(dat3$pet_ID))
print(length(unique(dat4b$pet_ID))) - print(length(unique(dat3$pet_ID)))
#0 data removals
sum(dat3$new_height != dat4b$new_height, na.rm = TRUE)
#800 adjustments taken place
#STEP 4 - IDENTIFY AND CORRECT TYPO ERRORS
#Typos are considered to be when a vector of height is transposed by accident,
#For example 84cm instead of 48cm
#CM typos are when owners have entered the height in cm with a typo
#Inches typos are when owners have entered the height in inches with a typo
##and then it has been converted to cm by the website
#Dogs that had more than one value considered a typo were not altered because it
#was considered unlikey an owner would have made a typo more than once
reverse_int <- function(n) {
t1 <- floor(log10(n))
t2 <- 0
for (i in t1:1)
t2 <- t2 + floor(n/10^i) * 10^(t1-i)
return(n*10^t1 - 99*t2)
}
dat4b <- dat4b %>%
dplyr::mutate(already_edited = new_height != height,
inverted_heights_cm = reverse_int(height),
inverted_heights_inches = reverse_int(inches_heights),
inverted_inches_transformed = as.numeric(inverted_heights_inches*2.54),
typo_cm = (outliers == TRUE) &
(inverted_heights_cm > lower2) &
(inverted_heights_cm < upper2) &
(height_unit == 'cm') &
(already_edited == FALSE),
typo_inches = (outliers == TRUE) &
(inverted_inches_transformed > lower2) &
(inverted_inches_transformed < upper2) &
(height_unit == 'ins') &
(already_edited == FALSE))
count_typos <- function(X){
num_typos <- sum(as.numeric(X$typo_inches) + as.numeric(X$typo_cm))
return(data.frame(X, num_typos  =  num_typos))
}
dat4b <- dat4b %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(count_typos(.)) %>%
dplyr::ungroup()
dat4b$typing_error <- "No typing error"
dat4b$typing_error <- ifelse(dat4b$typo_cm == TRUE,
dat4b$typo_cm, dat4b$typing_error)
dat4b$typing_error <- ifelse(dat4b$typing_error == TRUE,
"Cm typing error", dat4b$typing_error)
dat4b$typing_error <- ifelse(dat4b$typo_inches == TRUE,
dat4b$typo_inches, dat4b$typing_error)
dat4b$typing_error <- ifelse(dat4b$typing_error == TRUE,
"Inches typing error", dat4b$typing_error)
dat4c <- dat4b
dat4c$new_height <- ifelse((dat4c$typo_cm == TRUE) &
(dat4c$num_typos <2),
dat4c$inverted_heights_cm, dat4c$new_height)
sum(dat4c$new_height != dat4b$new_height, na.rm = TRUE)
#85 adjustments taken place
dat4d <- dat4c
dat4d$new_height <- ifelse((dat4d$typo_inches == TRUE) &
(dat4d$num_typos <2),
dat4d$inverted_inches_transformed, dat4d$new_height)
sum(dat4d$new_height != dat4c$new_height, na.rm = TRUE)
#0 adjustments taken place
#STEP 4 RESULTS -
dat4d$pet_ID <- factor(dat4d$pet_ID)
print(length(dat4d$pet_ID)) - print(length(dat4b$pet_ID))
print(length(unique(dat4d$pet_ID))) - print(length(unique(dat4b$pet_ID)))
#0 data removals
sum(dat4d$new_height != dat4b$new_height, na.rm = TRUE)
#85 adjustments taken place
diffs_in_heights <- function(X){
X$height_diff_NA <- c(NA, diff(X$new_height, lag=1))
X$pred_height_diff_NA <- c(NA, diff(X$pred1, lag=1))
return(X)
}
dat4d <- dat4d %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(diffs_in_heights(.)) %>%
dplyr::ungroup()
d1 <- dat4d %>%
filter(num_data_entries > 1) %>%
mutate(height_diff = na.locf(height_diff_NA, fromLast = TRUE),
pred_diff = na.locf(pred_height_diff_NA, fromLast = TRUE))
dat4d <- full_join(dat4d, d1)
get_lags_leads <- function(X){
X$height_diff_lag_NA <- lag(X$height_diff)
X$height_diff_lead_NA <- lead(X$height_diff)
X$pred_diff_lag_NA <- lag(X$pred_diff)
X$pred_diff_lead_NA <- lead(X$pred_diff)
return(X)
}
dat4d <- dat4d %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(get_lags_leads(.)) %>%
dplyr::ungroup()
d2 <- dat4d %>%
filter(num_data_entries > 1) %>%
mutate(height_diff_lag = na.locf(height_diff_lag_NA, fromLast = TRUE),
height_diff_lead = na.locf(height_diff_lead_NA),
pred_diff_lag = na.locf(pred_diff_lag_NA, fromLast = TRUE),
pred_diff_lead = na.locf(pred_diff_lead_NA))
dat4d <- full_join(dat4d, d2)
jumping_measurements <- function(X){
jumper <- (X$height_diff < -12.7) |
(X$height_diff_lag < -12.7) |
(X$height_diff_lead < -12.7) |
(X$height_diff > (X$pred_diff + 12.7)) |
(X$height_diff_lag > (X$pred_diff_lag + 12.7)) |
(X$height_diff_lead > (X$pred_diff_lead + 12.7))
return(data.frame(X, jumper = jumper))
}
dat4d <- dat4d %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(jumping_measurements(.)) %>%
dplyr::ungroup()
dat4d$outliers <- (dat4d$new_height < dat4d$lower2) |
(dat4d$new_height > dat4d$upper2)
dat4d$measurement_errors <- (dat4d$outliers == TRUE) &
(dat4d$jumper == TRUE)
count_errors <- function(X){
any_measurement_errors <- any(X$measurement_errors == TRUE)
measurement_error_count <- sum(as.numeric(X$measurement_errors))
all_outliers <- all(X$outliers == TRUE)
return(data.frame(X, measurement_error_count  =  measurement_error_count,
all_outliers = all_outliers,
any_measurement_errors = any_measurement_errors))
}
dat4d <- dat4d %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(count_errors(.)) %>%
dplyr::ungroup() %>%
dplyr::mutate(single_outliers = ((outliers == TRUE) &
(num_data_entries2 == 1)))
#STEP 5 OF CLEANING - REMOVE UNRELIABLE DOGS
dat4d$measurement_error_count <- ifelse(is.na(dat4d$measurement_error_count),
1, dat4d$measurement_error_count)
dat5 <- subset(dat4d, dat4d$measurement_error_count < 3)
dat5b <- subset(dat5, dat5$single_outliers != TRUE)
#STEP 5 RESULTS -
dat5b$pet_ID <- factor(dat5b$pet_ID)
print(length(dat5b$pet_ID)) - print(length(dat4d$pet_ID))
print(length(unique(dat5b$pet_ID))) - print(length(unique(dat4d$pet_ID)))
#dat5b has 22824 data entries from 5452 dogs
#dat4d has 22983 data entries from 5507 dogs
#Total of 159 data entry removals and 55 dogs removals
print(length(dat5b$pet_ID)) - print(length(dat5$pet_ID))
#Note that there were 42 single outliers
#STEP 6 OF CLEANING - REMOVE HEIGHT ENTRIES IDENTIFIED AS ERRORS
dat6 <- subset(dat5b, dat5b$measurement_errors != TRUE)
#STEP 6 RESULTS -
dat6$pet_ID <- factor(dat6$pet_ID)
print(length(dat6$pet_ID)) - print(length(dat5b$pet_ID))
print(length(unique(dat6$pet_ID))) - print(length(unique(dat5b$pet_ID)))
#dat6 has 22866 data entries from 5452 dogs
#dat5b has 22824 data entries from 5452 dogs
#Total of 265 data entry removals and 0 dogs removals
#STEP 7 - repeat step 5 and 6 and remove any further measurement errors
dat7 <- dat6[, -c(40:55)]
dat7 <- dat7 %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(diffs_in_heights(.)) %>%
dplyr::ungroup()
d3 <- dat7 %>%
filter(num_data_entries > 1) %>%
mutate(height_diff = na.locf(height_diff_NA, fromLast = TRUE),
pred_diff = na.locf(pred_height_diff_NA, fromLast = TRUE))
dat7 <- full_join(dat7, d3)
dat7 <- dat7 %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(get_lags_leads(.)) %>%
dplyr::ungroup()
d4 <- dat7 %>%
filter(num_data_entries > 1) %>%
mutate(height_diff_lag = na.locf(height_diff_lag_NA, fromLast = TRUE),
height_diff_lead = na.locf(height_diff_lead_NA),
pred_diff_lag = na.locf(pred_diff_lag_NA, fromLast = TRUE),
pred_diff_lead = na.locf(pred_diff_lead_NA))
dat7 <- full_join(dat7, d4)
dat7 <- dat7 %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(jumping_measurements(.)) %>%
dplyr::ungroup()
dat7 <- dat7 %>%
dplyr::mutate(outliers = ((new_height < lower2) | (new_height > upper2)),
measurement_errors = ((outliers == TRUE) & (jumper == TRUE)))
dat7 <- dat7 %>%
dplyr::group_by(pet_ID) %>%
dplyr::do(count_errors(.)) %>%
dplyr::ungroup() %>%
dplyr::mutate(single_outliers = ((outliers == TRUE) & (num_data_entries == 1)))
dat7$measurement_error_count <- ifelse(is.na(dat7$measurement_error_count),
1, dat7$measurement_error_count)
master <- subset(dat7, dat7$any_measurement_errors != TRUE)
#STEP 7 RESULTS
master$pet_ID <- factor(master$pet_ID)
print(length(master$pet_ID)) - print(length(dat6$pet_ID))
print(length(unique(master$pet_ID))) - print(length(unique(dat6$pet_ID)))
#master has 22481 data entries from 5437 dogs
#dat6 has 22559 data entries from 5452 dogs
#Total of 78 data entry removals and 15 dogs removals
sum(master$outliers)
#Run model on new, cleaned data
fm2 <- nlme(new_height ~ SSasympOff(height_age.x, Asym, growth_rate,
age_at_height_zero),
data = master,
fixed = list(Asym + age_at_height_zero +
growth_rate ~ 1 + sex),
random = Asym + growth_rate ~ 1|pet_ID,
start = list(fixed = c(Asym = c(60,1),
age_at_height_zero = -c(10,1),
growth_rate = -c(4,1))))
summary(fm2)
